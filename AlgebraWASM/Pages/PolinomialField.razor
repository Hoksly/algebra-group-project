@page "/polinomial-field"
@using System.ComponentModel.DataAnnotations;
@using System.Text;
@using AlgebraWASM.Client;
@using System.Runtime.InteropServices;
<style>
	html {
		font-size: 125%;
		line-height: 1.4;
	}

	body {
		background: linear-gradient(to right, #4e006e, #020085);
		color: floralwhite;
	}
</style>
<link href="css/typingResult.css" rel="stylesheet" />
<link href="css/buttons.css" rel="stylesheet" />


<div class="wrapper">
	<select @onchange="SelectedMethod">
		<option value="">--Оберіть метод--</option>
		<option value="15">15. Розклад кругового многочлена на незвідні.</option>
		<option value="16">16. Знаходження К незвідних многочленів.</option>
		<option value="17">17. Перевірка чи є многочлен незвідним.</option>
		<option value="18">18. Додавання, віднімання, множення двох многочленів. Нормування. Швидке піднесення у степінь.</option>
		<option value="19">19. Знаходження оберненого многочлена (алгоритм Евкліда).</option>
		<option value="20">20. Знаходження порядку незвідного многочлена.</option>
	</select>
	<div class="input">
		<input type="text" name="input" id="input" @bind-value="@coefModule" placeholder="Enter coefficient module">
	</div>
	<div class="input">
		<input type="text" name="input" id="input" @bind-value="@powModule" placeholder="Enter pow module">
	</div>
	@switch (selected)
	{
		case "15":
			<div>
				<div class="wrapper">
					<div class="input">
						<input type="text" name="input" id="input" @bind-value="@firstInputBox" placeholder="Enter first number">
						<input type="text" name="input" id="input" @bind-value="@secondInputBox" placeholder="Enter second number">
					</div>
				</div>
				<button class="custom-btn btn-15" @onclick="Add">Add</button>
				<button class="custom-btn btn-15" @onclick="Subtract">Subtract</button>
				<button class="custom-btn btn-15" @onclick="Multiply">Multiply</button>
				@if (!string.IsNullOrWhiteSpace(result))
				{
					<div class="wrapper">
						<div class="typing-demo">
							Result:
						</div>
						<div class="typing-demo">
							@result
						</div>
					</div>
				}
			</div>
			break;
		case "16":
			<div>
				<div class="wrapper">
					<div class="input">
						<input type="text" name="input" id="input" @bind-value="@firstInputBox" placeholder="Enter first number">
						<input type="text" name="input" id="input" @bind-value="@secondInputBox" placeholder="Enter second number">
					</div>
				</div>
				<button class="custom-btn btn-15" @onclick="Calculate">Calculate</button>
				@if (!string.IsNullOrWhiteSpace(result))
				{
					<div class="wrapper">
						<div class="typing-demo">
							Result:
						</div>
						<div class="typing-demo">
							@result
						</div>
					</div>
				}
			</div>
			break;
		case "17":
			<div>
				<div class="wrapper">
					<div class="input">
						<input type="text" name="input" id="input" @bind-value="@firstInputBox" placeholder="Enter a number">
					</div>
				</div>
				<button class="custom-btn btn-15" @onclick="Calculate">Calculate</button>
				@if (!string.IsNullOrWhiteSpace(result))
				{
					<div class="wrapper">
						<div class="typing-demo">
							Result:
						</div>
						<div class="typing-demo">
							@result
						</div>
					</div>
				}
			</div>
			break;
		case "18": @*todo*@
			<div>
				<div class="wrapper">
					<div class="input">
						<input type="text" name="input" id="input" @bind-value="@firstInputBox" placeholder="Enter first number">
						<input type="text" name="input" id="input" @bind-value="@secondInputBox" placeholder="Enter second number">
					</div>
				</div>
				<button class="custom-btn btn-15" @onclick="Add">Add</button>
				<button class="custom-btn btn-15" @onclick="Subtract">Subtract</button>
				<button class="custom-btn btn-15" @onclick="Multiply">Multiply</button>
				<button class="custom-btn btn-15" @onclick="Norm">Norm</button>
				@if (!string.IsNullOrWhiteSpace(result))
				{
					<div class="wrapper">
						<div class="typing-demo">
							Result:
						</div>
						<div class="typing-demo">
							@result
						</div>
					</div>
				}
			</div>
			break;
		case "19":@*todo*@
			<div>
				<div class="wrapper">
					<div class="input">
						<input type="text" name="input" id="input" @bind-value="@firstInputBox" placeholder="Enter number">
					</div>
				</div>
				<button class="custom-btn btn-15" @onclick="Inverse">Inverse</button>
				@if (!string.IsNullOrWhiteSpace(result))
				{
					<div class="wrapper">
						<div class="typing-demo">
							Result:
						</div>
						<div class="typing-demo">
							@result
						</div>
					</div>
				}
			</div>
			break;
		case "20":@*todo*@
			<div>
				<div class="wrapper">
					<div class="input">
						<input type="text" name="input" id="input" @bind-value="@firstInputBox" placeholder="Enter number">
					</div>
				</div>
				<button class="custom-btn btn-15" @onclick="Order">Order</button>
				@if (!string.IsNullOrWhiteSpace(result))
				{
					<div class="wrapper">
						<div class="typing-demo">
							Result:
						</div>
						<div class="typing-demo">
							@result
						</div>
					</div>
				}
			</div>
			break;
		default:
			break;
	}
</div>

@code {
	public string selected { get; set; } = "";
	public string result { get; set; } = "";
	public string errStr { get; set; } = "";
	[Required] public static string coefModule { get; set; } = "";
	[Required] public static string powModule { get; set; } = "";
	[Required] public string firstInputBox { get; set; } = "";
	[Required] public string secondInputBox { get; set; } = "";

	private void SelectedMethod(ChangeEventArgs e)
	{
		result = "";
		errStr = "";
		if (!string.IsNullOrWhiteSpace((string)e.Value))
		{
			selected = (string)e.Value;
		}
	}

	private unsafe void Add()
	{
		//try
		//{
		//	int size1, size2;
		//	var aBytes = PolinomialParser.ParsePolynomial(firstInputBox, out size1);
		//	var bBytes = PolinomialParser.ParsePolynomial(secondInputBox, out size2);
		//	byte[] modBytes = Encoding.ASCII.GetBytes(coefModule);
		//	byte[] errorStrBytes = Encoding.ASCII.GetBytes(errStr);

		//	int size = 0;

		//	fixed (byte* modPtr = modBytes)
		//	fixed (byte* errStrPtr = errorStrBytes)
		//	{
		//		byte** resultPtr = PolyRingMethods.polyAddition(ref size, size1, aBytes, size2, bBytes, modPtr, errStrPtr);

		//		List<string> resultList = new List<string>();
		//		int offset = 0;
		//		while (true)
		//		{
		//			IntPtr currentPtr = new IntPtr(resultPtr[offset]);
		//			if (currentPtr == IntPtr.Zero)
		//				break;

		//			byte[] currentBytes = Encoding.ASCII.GetBytes(Marshal.PtrToStringAnsi(currentPtr));
		//			resultList.Add(Encoding.ASCII.GetString(currentBytes));
		//			offset++;
		//		}

		//		string[] resultArray = resultList.ToArray();
		//		Dictionary<string, int> resultDct = new Dictionary<string, int>();

		//		foreach (string number in resultArray)
		//		{
		//			if (resultDct.ContainsKey(number))
		//				resultDct[number]++;
		//			else
		//				resultDct[number] = 1;
		//		}

		//		string res = "";
		//		foreach (var kvp in resultDct)
		//		{
		//			res += "Key: " + kvp.Key + " Value: " + kvp.Value + '\n';
		//		}
		//		result = res;
		//	}
		//}
		//catch (Exception ex)
		//{
		//	Console.WriteLine(ex.Message);
		//}
	}

	private unsafe void Subtract()
	{
		//try
		//{
		//	int size1, size2;
		//	var aBytes = PolinomialParser.ParsePolynomial(firstInputBox, out size1);
		//	var bBytes = PolinomialParser.ParsePolynomial(secondInputBox, out size2);
		//	byte[] modBytes = Encoding.ASCII.GetBytes(coefModule);
		//	byte[] errorStrBytes = Encoding.ASCII.GetBytes(errStr);

		//	int size = 0;

		//	fixed (byte* modPtr = modBytes)
		//	fixed (byte* errStrPtr = errorStrBytes)
		//	{
		//		byte** resultPtr = PolyRingMethods.polySubstruction(ref size, size1, aBytes, size2, bBytes, modPtr, errStrPtr);

		//		List<string> resultList = new List<string>();
		//		int offset = 0;
		//		while (true)
		//		{
		//			IntPtr currentPtr = new IntPtr(resultPtr[offset]);
		//			if (currentPtr == IntPtr.Zero)
		//				break;

		//			byte[] currentBytes = Encoding.ASCII.GetBytes(Marshal.PtrToStringAnsi(currentPtr));
		//			resultList.Add(Encoding.ASCII.GetString(currentBytes));
		//			offset++;
		//		}

		//		string[] resultArray = resultList.ToArray();
		//		Dictionary<string, int> resultDct = new Dictionary<string, int>();

		//		foreach (string number in resultArray)
		//		{
		//			if (resultDct.ContainsKey(number))
		//				resultDct[number]++;
		//			else
		//				resultDct[number] = 1;
		//		}

		//		string res = "";
		//		foreach (var kvp in resultDct)
		//		{
		//			res += "Key: " + kvp.Key + " Value: " + kvp.Value + '\n';
		//		}
		//		result = res;
		//	}
		//}
		//catch (Exception ex)
		//{
		//	Console.WriteLine(ex.Message);
		//}
	}

	private unsafe void Multiply()
	{
		//try
		//{
		//	int size1, size2;
		//	var aBytes = PolinomialParser.ParsePolynomial(firstInputBox, out size1);
		//	var bBytes = PolinomialParser.ParsePolynomial(secondInputBox, out size2);
		//	byte[] modBytes = Encoding.ASCII.GetBytes(coefModule);
		//	byte[] errorStrBytes = Encoding.ASCII.GetBytes(errStr);

		//	int size = 0;

		//	fixed (byte* modPtr = modBytes)
		//	fixed (byte* errStrPtr = errorStrBytes)
		//	{
		//		byte** resultPtr = PolyRingMethods.polyMultiplication(ref size, size1, aBytes, size2, bBytes, modPtr, errStrPtr);

		//		List<string> resultList = new List<string>();
		//		int offset = 0;
		//		while (true)
		//		{
		//			IntPtr currentPtr = new IntPtr(resultPtr[offset]);
		//			if (currentPtr == IntPtr.Zero)
		//				break;

		//			byte[] currentBytes = Encoding.ASCII.GetBytes(Marshal.PtrToStringAnsi(currentPtr));
		//			resultList.Add(Encoding.ASCII.GetString(currentBytes));
		//			offset++;
		//		}

		//		string[] resultArray = resultList.ToArray();
		//		Dictionary<string, int> resultDct = new Dictionary<string, int>();

		//		foreach (string number in resultArray)
		//		{
		//			if (resultDct.ContainsKey(number))
		//				resultDct[number]++;
		//			else
		//				resultDct[number] = 1;
		//		}

		//		string res = "";
		//		foreach (var kvp in resultDct)
		//		{
		//			res += "Key: " + kvp.Key + " Value: " + kvp.Value + '\n';
		//		}
		//		result = res;
		//	}
		//}
		//catch (Exception ex)
		//{
		//	Console.WriteLine(ex.Message);
		//}
	}

	private void Calculate()
	{
		//MethodWrapper.addition();
	}

	private void Norm()
	{
		//MethodWrapper.addition();
	}

	private void Inverse()
	{
		//MethodWrapper.addition();
	}

	private void Order()
	{
		//MethodWrapper.addition();
	}
}
