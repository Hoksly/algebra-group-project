@page "/finite-field"
@using AlgebraWASM.Client;
@using System.ComponentModel.DataAnnotations;
@using System.Runtime.InteropServices;
@using System.Text;
@using System.Text.RegularExpressions;
<style>
	html {
		font-size: 125%;
		line-height: 1.4;
	}

	body {
		background: linear-gradient(to right, #4e006e, #020085);
		color: floralwhite;
	}
</style>
<link href="css/typingResult.css" rel="stylesheet" />
<link href="css/buttons.css" rel="stylesheet" />

<div class="wrapper">
	<div class="alert alert-secondary mt-4" style="width: 35%; font-size: 34px;">
		<strong>Скінченне поле</strong>
	</div>
	<div class="alert alert-secondary mt-4">
	<select @onchange="SelectedMethod">
		<option value="">--Оберіть метод--</option>
		<option value="2">2. Додавання, віднімання, множення чисел.</option>
		<option value="3">3. Знаходження оберненого елемента.</option>
		<option value="4">4. Швидке піднесення у степінь</option>
		<option value="5">5. Розклад числа на множники</option>
		<option value="6">6. Обчислення квадратного кореня</option>
		<option value="7">7. Обчислення дискретного логарифму</option>
		@*<option value="8">8. Знаходження порядку елемента групи</option>*@
		<option value="8">8. Знаходження функції Ейлера та Кармайкла</option>
		<option value="9">9. Ймовірнісна перевірка числа на простоту</option>
	</select>
	</div>

	@if (!string.IsNullOrWhiteSpace(selected))
	{
		<div class="input">
			<input type="text" name="input" id="input" @bind-value="@coefModule" placeholder="Enter coefficient module">
		</div>
	}

	@switch (selected)
	{
		case "2":
			<div>
				<div class="wrapper">
					<div class="input">
						<input type="text" name="input" id="input" @bind-value="@firstInputBox" placeholder="Enter first number">
						<input type="text" name="input" id="input" @bind-value="@secondInputBox" placeholder="Enter second number">
					</div>
				</div>
				<button class="custom-btn btn-15" @onclick="Add">Add</button>
				<button class="custom-btn btn-15" @onclick="Subtract">Subtract</button>
				<button class="custom-btn btn-15" @onclick="Multiply">Multiply</button>
				@if (!string.IsNullOrWhiteSpace(result))
				{
					<div class="wrapper">
						<div class="typing-demo">
							<label>Result:</label>
						</div>
						<div class="typing-demo">
							@result
						</div>
					</div>
				}
			</div>
			break;
		case "3":
			<div>
				<div class="wrapper">
					<div class="input">
						<input type="text" name="input" id="input" @bind-value="@firstInputBox" placeholder="Enter first number">
						<input type="text" name="input" id="input" @bind-value="@secondInputBox" placeholder="Enter second number">
					</div>
				</div>
				<button class="custom-btn btn-15" @onclick="Inversion">Inversion</button>
				<button class="custom-btn btn-15" @onclick="Division">Division</button>
				@if (!string.IsNullOrWhiteSpace(result))
				{
					<div class="wrapper">
						<div class="typing-demo">
							Result:
						</div>
						<div class="typing-demo">
							@result
						</div>
					</div>
				}
			</div>
			break;
		case "4":
			<div>
				<div class="wrapper">
					<div class="input">
						<input type="text" name="input" id="input" @bind-value="@firstInputBox" placeholder="Enter first number">
						<input type="text" name="input" id="input" @bind-value="@secondInputBox" placeholder="Enter second number">
					</div>
				</div>
				<button class="custom-btn btn-15" @onclick="FastPow">Fast Pow</button>
				@if (!string.IsNullOrWhiteSpace(result))
				{
					<div class="wrapper">
						<div class="typing-demo">
							Result:
						</div>
						<div class="typing-demo">
							@result
						</div>
					</div>
				}
			</div>
			break;
		case "5":
			<div>
				<div class="wrapper">
					<div class="input">
						<input type="text" name="input" id="input" @bind-value="@firstInputBox" placeholder="Enter number">
					</div>
				</div>
				<button class="custom-btn btn-15" @onclick="Polard">Polard</button>
				<button class="custom-btn btn-15" @onclick="NaiveFactor">NaiveFactor</button>
				@if (!string.IsNullOrWhiteSpace(result))
				{
					<div class="wrapper">
						<div class="typing-demo">
							Result:
						</div>
						<div class="typing-demo">
							@result
						</div>
					</div>
				}
			</div>
			break;
		case "6":
			<div>
				<div class="wrapper">
					<div class="input">
						<input type="text" name="input" id="input" @bind-value="@firstInputBox" placeholder="Enter number">
					</div>
				</div>
				<button class="custom-btn btn-15" @onclick="DscSqrt">DiscreteSqrt</button>
				@if (!string.IsNullOrWhiteSpace(result))
				{
					<div class="wrapper">
						<div class="typing-demo">
							Result:
						</div>
						<div class="typing-demo">
							@result
						</div>
					</div>
				}
			</div>
			break;
		case "7":
			<div>
				<div class="wrapper">
					<div class="input">
						<input type="text" name="input" id="input" @bind-value="@firstInputBox" placeholder="Enter first number">
						<input type="text" name="input" id="input" @bind-value="@secondInputBox" placeholder="Enter second number">
					</div>
				</div>
				<button class="custom-btn btn-15" @onclick="isGenerator">isGenerator</button>
				<button class="custom-btn btn-15" @onclick="DscLog">discreteLog</button>
				@if (!string.IsNullOrWhiteSpace(result))
				{
					<div class="wrapper">
						<div class="typing-demo">
							Result:
						</div>
						<div class="typing-demo">
							@result
						</div>
					</div>
				}
			</div>
			break;
		@*case "8":
			<div>
				<div class="wrapper">
					<div class="input">
						<input type="text" name="input" id="input" @bind-value="@firstInputBox" placeholder="Enter number">
					</div>
				</div>
				<button class="custom-btn btn-15" @onclick="Order">Order</button>
				<button class="custom-btn btn-15" @onclick="isGenerator">isGenerator</button>
				@if (!string.IsNullOrWhiteSpace(result))
				{
					<div class="wrapper">
						<div class="typing-demo">
							Result:
						</div>
						<div class="typing-demo">
							@result
						</div>
					</div>
				}
			</div>
			break;*@
		case "8":
			<div>
				<div class="wrapper">
					<div class="input">
						<input type="text" name="input" id="input" @bind-value="@firstInputBox" placeholder="Enter number">
					</div>
				</div>
				<button class="custom-btn btn-15" @onclick="Euiler">Euiler</button>
				<button class="custom-btn btn-15" @onclick="Carmichael">Carmichael</button>
				@if (!string.IsNullOrWhiteSpace(result))
				{
					<div class="wrapper">
						<div class="typing-demo">
							Result:
						</div>
						<div class="typing-demo">
							@result
						</div>
					</div>
				}
			</div>
			break;
		case "9":
			<div>
				<div class="wrapper">
					<div class="input">
						<input type="text" name="input" id="input" @bind-value="@firstInputBox" placeholder="Enter first number">
						<input type="text" name="input" id="input" @bind-value="@secondInputBox" placeholder="Enter iterations">
					</div>
				</div>
				<button class="custom-btn btn-15" @onclick="isPrime">isPrime</button>
				@if (!string.IsNullOrWhiteSpace(result))
				{
					<div class="wrapper">
						<div class="typing-demo">
							Result:
						</div>
						<div class="typing-demo">
							@result
						</div>
					</div>
				}
			</div>
			break;
		
	}
</div>




@code {
	public string selected { get; set; } = "";
	public string result { get; set; } = "";
	public string errStr { get; set; } = "";
	[Required] public static string coefModule { get; set; } = "";
	[Required] public string firstInputBox { get; set; } = "";
	[Required] public string secondInputBox { get; set; } = "";

	private void SelectedMethod(ChangeEventArgs e)
	{
		result = "";
		errStr = "";
		if (!string.IsNullOrWhiteSpace((string)e.Value))
		{
			selected = (string)e.Value;
		}
	}

	void NormalizeInputString()
	{
		coefModule = Regex.Replace(coefModule, "[^0-9]", "");
		firstInputBox = Regex.Replace(firstInputBox, "[^0-9]", "");
		secondInputBox = Regex.Replace(secondInputBox, "[^0-9]", "");

		if (string.IsNullOrWhiteSpace(coefModule)) coefModule = "1";
		if (string.IsNullOrWhiteSpace(firstInputBox)) firstInputBox = "1";
		if (string.IsNullOrWhiteSpace(secondInputBox)) secondInputBox = "1";
	}

	private unsafe void Add()
	{
		try
		{
			NormalizeInputString();


			byte[] aBytes = Encoding.ASCII.GetBytes(firstInputBox);
			byte[] bBytes = Encoding.ASCII.GetBytes(secondInputBox);
			byte[] modBytes = Encoding.ASCII.GetBytes(coefModule);
			byte[] errorStrBytes = Encoding.ASCII.GetBytes(errStr);

			fixed (byte* aPtr = aBytes)
			fixed (byte* bPtr = bBytes)
			fixed (byte* modPtr = modBytes)
			fixed (byte* errStrPtr = errorStrBytes)
			{
				byte* resultPtr = FiniteFieldMethods.addition(aPtr, bPtr, modPtr, errStrPtr);

				int resultLength = 0;
				while (resultPtr[resultLength] != 0)
					resultLength++;

				byte[] resultBytes = new byte[resultLength];
				Marshal.Copy((IntPtr)resultPtr, resultBytes, 0, resultLength);
				result = Encoding.ASCII.GetString(resultBytes);
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	private unsafe void Subtract()
	{
		try
		{
			NormalizeInputString();
			byte[] aBytes = Encoding.ASCII.GetBytes(firstInputBox);
			byte[] bBytes = Encoding.ASCII.GetBytes(secondInputBox);
			byte[] modBytes = Encoding.ASCII.GetBytes(coefModule);
			byte[] errorStrBytes = Encoding.ASCII.GetBytes(errStr);

			fixed (byte* aPtr = aBytes)
			fixed (byte* bPtr = bBytes)
			fixed (byte* modPtr = modBytes)
			fixed (byte* errStrPtr = errorStrBytes)
			{
				byte* resultPtr = FiniteFieldMethods.subtraction(aPtr, bPtr, modPtr, errStrPtr);

				int resultLength = 0;
				while (resultPtr[resultLength] != 0)
					resultLength++;

				byte[] resultBytes = new byte[resultLength];
				Marshal.Copy((IntPtr)resultPtr, resultBytes, 0, resultLength);
				result = Encoding.ASCII.GetString(resultBytes);
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	private unsafe void Multiply()
	{
		try
		{
			NormalizeInputString();
			byte[] aBytes = Encoding.ASCII.GetBytes(firstInputBox);
			byte[] bBytes = Encoding.ASCII.GetBytes(secondInputBox);
			byte[] modBytes = Encoding.ASCII.GetBytes(coefModule);
			byte[] errorStrBytes = Encoding.ASCII.GetBytes(errStr);

			fixed (byte* aPtr = aBytes)
			fixed (byte* bPtr = bBytes)
			fixed (byte* modPtr = modBytes)
			fixed (byte* errStrPtr = errorStrBytes)
			{
				byte* resultPtr = FiniteFieldMethods.multiplication(aPtr, bPtr, modPtr, errStrPtr);

				int resultLength = 0;
				while (resultPtr[resultLength] != 0)
					resultLength++;

				byte[] resultBytes = new byte[resultLength];
				Marshal.Copy((IntPtr)resultPtr, resultBytes, 0, resultLength);
				result = Encoding.ASCII.GetString(resultBytes);
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	private unsafe void Inversion()
	{
		try
		{
			NormalizeInputString();
			byte[] aBytes = Encoding.ASCII.GetBytes(firstInputBox);
			byte[] modBytes = Encoding.ASCII.GetBytes(coefModule);
			byte[] errorStrBytes = Encoding.ASCII.GetBytes(errStr);

			fixed (byte* aPtr = aBytes)
			fixed (byte* modPtr = modBytes)
			fixed (byte* errStrPtr = errorStrBytes)
			{
				byte* resultPtr = FiniteFieldMethods.inverse(aPtr, modPtr, errStrPtr);

				int resultLength = 0;
				while (resultPtr[resultLength] != 0)
					resultLength++;

				byte[] resultBytes = new byte[resultLength];
				Marshal.Copy((IntPtr)resultPtr, resultBytes, 0, resultLength);
				result = Encoding.ASCII.GetString(resultBytes);
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	private unsafe void Division()
	{
		try
		{
			NormalizeInputString();
			byte[] aBytes = Encoding.ASCII.GetBytes(firstInputBox);
			byte[] bBytes = Encoding.ASCII.GetBytes(secondInputBox);
			byte[] modBytes = Encoding.ASCII.GetBytes(coefModule);
			byte[] errorStrBytes = Encoding.ASCII.GetBytes(errStr);

			fixed (byte* aPtr = aBytes)
			fixed (byte* bPtr = bBytes)
			fixed (byte* modPtr = modBytes)
			fixed (byte* errStrPtr = errorStrBytes)
			{
				byte* resultPtr = FiniteFieldMethods.division(aPtr, bPtr, modPtr, errStrPtr);

				int resultLength = 0;
				while (resultPtr[resultLength] != 0)
					resultLength++;

				byte[] resultBytes = new byte[resultLength];
				Marshal.Copy((IntPtr)resultPtr, resultBytes, 0, resultLength);
				result = Encoding.ASCII.GetString(resultBytes);
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	private unsafe void FastPow()
	{
		try
		{
			NormalizeInputString();
			byte[] aBytes = Encoding.ASCII.GetBytes(firstInputBox);
			byte[] bBytes = Encoding.ASCII.GetBytes(secondInputBox);
			byte[] modBytes = Encoding.ASCII.GetBytes(coefModule);
			byte[] errorStrBytes = Encoding.ASCII.GetBytes(errStr);

			fixed (byte* aPtr = aBytes)
			fixed (byte* bPtr = bBytes)
			fixed (byte* modPtr = modBytes)
			fixed (byte* errStrPtr = errorStrBytes)
			{
				byte* resultPtr = FiniteFieldMethods.fastPow(aPtr, bPtr, modPtr, errStrPtr);

				int resultLength = 0;
				while (resultPtr[resultLength] != 0)
					resultLength++;

				byte[] resultBytes = new byte[resultLength];
				Marshal.Copy((IntPtr)resultPtr, resultBytes, 0, resultLength);
				result = Encoding.ASCII.GetString(resultBytes);
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	private unsafe void Polard()
	{
		try
		{
			NormalizeInputString();
			byte[] aBytes = Encoding.ASCII.GetBytes(firstInputBox);
			byte[] modBytes = Encoding.ASCII.GetBytes(coefModule);
			byte[] errorStrBytes = Encoding.ASCII.GetBytes(errStr);

			fixed (byte* aPtr = aBytes)
			fixed (byte* modPtr = modBytes)
			fixed (byte* errStrPtr = errorStrBytes)
			{
				int size = 0;
				byte* resultPtr = FiniteFieldMethods.factorizePolard(ref size, aPtr, modPtr, errStrPtr);

				IntPtr currentPtr = (IntPtr)resultPtr;
				if (currentPtr == IntPtr.Zero)
					return;

				byte[] currentBytes = Encoding.ASCII.GetBytes(Marshal.PtrToStringAnsi(currentPtr));
				string tmp = Encoding.ASCII.GetString(currentBytes);

				String[] splited = tmp.Split(' ');

				Dictionary<string, int> resultDct = new Dictionary<string, int>();

				for (int i = 0; i < splited.Length-1; ++i)
				{
					if (resultDct.ContainsKey(splited[i]))
						resultDct[splited[i]]++;
					else
						resultDct[splited[i]] = 1;
				}

				string res = "";
				foreach (var kvp in resultDct)
				{
					res +=  kvp.Key + "^" + kvp.Value + " * ";
				}
				res = res.Substring(0, res.Length - 2);
				result = res;
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	private unsafe void NaiveFactor()
	{
		try
		{
			NormalizeInputString();
			byte[] aBytes = Encoding.ASCII.GetBytes(firstInputBox);
			byte[] modBytes = Encoding.ASCII.GetBytes(coefModule);
			byte[] errorStrBytes = Encoding.ASCII.GetBytes(errStr);

			fixed (byte* aPtr = aBytes)
			fixed (byte* modPtr = modBytes)
			fixed (byte* errStrPtr = errorStrBytes)
			{
				int size = 0;
				byte* resultPtr = FiniteFieldMethods.factorizeSimple(ref size, aPtr, modPtr, errStrPtr);

				IntPtr currentPtr = (IntPtr)resultPtr;
				if (currentPtr == IntPtr.Zero)
					return;

				byte[] currentBytes = Encoding.ASCII.GetBytes(Marshal.PtrToStringAnsi(currentPtr));
				string tmp = Encoding.ASCII.GetString(currentBytes);

				String[] splited = tmp.Split(' ');

				Dictionary<string, int> resultDct = new Dictionary<string, int>();

				for (int i = 0; i < splited.Length - 1; ++i)
				{
					if (resultDct.ContainsKey(splited[i]))
						resultDct[splited[i]]++;
					else
						resultDct[splited[i]] = 1;
				}

				string res = "";
				foreach (var kvp in resultDct)
				{
					res +=  kvp.Key + "^" + kvp.Value + " * ";
				}
				res = res.Substring(0, res.Length - 2);
				result = res;
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	private unsafe void DscSqrt()
	{
		try
		{
			NormalizeInputString();
			byte[] aBytes = Encoding.ASCII.GetBytes(firstInputBox);
			byte[] modBytes = Encoding.ASCII.GetBytes(coefModule);
			byte[] errorStrBytes = Encoding.ASCII.GetBytes(errStr);

			fixed (byte* aPtr = aBytes)
			fixed (byte* modPtr = modBytes)
			fixed (byte* errStrPtr = errorStrBytes)
			{
				int size = 0;
				byte* resultPtr = FiniteFieldMethods.discreteSqrt(ref size, aPtr, modPtr, errStrPtr);

				IntPtr currentPtr = (IntPtr)resultPtr;
				if (currentPtr == IntPtr.Zero)
					return;

				byte[] currentBytes = Encoding.ASCII.GetBytes(Marshal.PtrToStringAnsi(currentPtr));
				string tmp = Encoding.ASCII.GetString(currentBytes);

				String[] splited = tmp.Split(' ');

				Dictionary<string, int> resultDct = new Dictionary<string, int>();

				for (int i = 0; i < splited.Length - 1; ++i)
				{
					if (resultDct.ContainsKey(splited[i]))
						resultDct[splited[i]]++;
					else
						resultDct[splited[i]] = 1;
				}

				string res = "";
				foreach (var kvp in resultDct)
				{
					res +=  kvp.Key + ", ";
				}
				res = res.Substring(0, res.Length - 2);
				result = res;
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	private unsafe void DscLog()
	{
		try
		{
			NormalizeInputString();
			byte[] aBytes = Encoding.ASCII.GetBytes(firstInputBox);
			byte[] bBytes = Encoding.ASCII.GetBytes(secondInputBox);
			byte[] modBytes = Encoding.ASCII.GetBytes(coefModule);
			byte[] errorStrBytes = Encoding.ASCII.GetBytes(errStr);

			fixed (byte* aPtr = aBytes)
			fixed (byte* bPtr = bBytes)
			fixed (byte* modPtr = modBytes)
			fixed (byte* errStrPtr = errorStrBytes)
			{
				byte* resultPtr = FiniteFieldMethods.discreteLog(aPtr, bPtr, modPtr, errStrPtr);

				int resultLength = 0;
				while (resultPtr[resultLength] != 0)
					resultLength++;

				byte[] resultBytes = new byte[resultLength];
				Marshal.Copy((IntPtr)resultPtr, resultBytes, 0, resultLength);
				result = Encoding.ASCII.GetString(resultBytes);
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}
	

	private unsafe void isGenerator()
	{
		try
		{
			NormalizeInputString();
			byte[] aBytes = Encoding.ASCII.GetBytes(firstInputBox);
			byte[] modBytes = Encoding.ASCII.GetBytes(coefModule);
			byte[] errorStrBytes = Encoding.ASCII.GetBytes(errStr);

			fixed (byte* aPtr = aBytes)
			fixed (byte* modPtr = modBytes)
			fixed (byte* errStrPtr = errorStrBytes)
			{
				result = FiniteFieldMethods.isGenerator(aPtr, modPtr, errStrPtr).ToString();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	private unsafe void Carmichael()
	{
		try
		{
			NormalizeInputString();
			byte[] aBytes = Encoding.ASCII.GetBytes(firstInputBox);
			byte[] bBytes = Encoding.ASCII.GetBytes(secondInputBox);
			byte[] modBytes = Encoding.ASCII.GetBytes(coefModule);
			byte[] errorStrBytes = Encoding.ASCII.GetBytes(errStr);

			fixed (byte* aPtr = aBytes)
			fixed (byte* bPtr = bBytes)
			fixed (byte* modPtr = modBytes)
			fixed (byte* errStrPtr = errorStrBytes)
			{
				byte* resultPtr = FiniteFieldMethods.CarmichaelFunction(aPtr, modPtr, errStrPtr);

				int resultLength = 0;
				while (resultPtr[resultLength] != 0)
					resultLength++;

				byte[] resultBytes = new byte[resultLength];
				Marshal.Copy((IntPtr)resultPtr, resultBytes, 0, resultLength);
				result = Encoding.ASCII.GetString(resultBytes);
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	private unsafe void Euiler()
	{
		try
		{
			NormalizeInputString();
			byte[] aBytes = Encoding.ASCII.GetBytes(firstInputBox);
			byte[] modBytes = Encoding.ASCII.GetBytes(coefModule);
			byte[] errorStrBytes = Encoding.ASCII.GetBytes(errStr);

			fixed (byte* aPtr = aBytes)
			fixed (byte* modPtr = modBytes)
			fixed (byte* errStrPtr = errorStrBytes)
			{
				byte* resultPtr = FiniteFieldMethods.EulerFunction(aPtr, modPtr, errStrPtr);

				int resultLength = 0;
				while (resultPtr[resultLength] != 0)
					resultLength++;

				byte[] resultBytes = new byte[resultLength];
				Marshal.Copy((IntPtr)resultPtr, resultBytes, 0, resultLength);
				result = Encoding.ASCII.GetString(resultBytes);
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	private unsafe void isPrime()
	{
		try
		{
			NormalizeInputString();
			byte[] aBytes = Encoding.ASCII.GetBytes(firstInputBox);
			byte[] bBytes = Encoding.ASCII.GetBytes(secondInputBox);
			byte[] modBytes = Encoding.ASCII.GetBytes(coefModule);
			byte[] errorStrBytes = Encoding.ASCII.GetBytes(errStr);

			fixed (byte* aPtr = aBytes)
			fixed (byte* bPtr = bBytes)
			fixed (byte* modPtr = modBytes)
			fixed (byte* errStrPtr = errorStrBytes)
			{
				result = FiniteFieldMethods.isPrime(aPtr, modPtr, bPtr, errStrPtr).ToString();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}
}