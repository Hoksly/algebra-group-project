@page "/polinomial-ring"
@using System.ComponentModel.DataAnnotations;
@using System.Text;
@using AlgebraWASM.Client;
@using System.Runtime.InteropServices;
<style>
	html {
		font-size: 125%;
		line-height: 1.4;
	}

	body {
		background: linear-gradient(to right, #4e006e, #020085);
		color: floralwhite;
	}
</style>
<link href="css/typingResult.css" rel="stylesheet" />
<link href="css/buttons.css" rel="stylesheet" />


<div class="wrapper">
	<div class="alert alert-secondary mt-4" style="width: 35%; font-size: 34px;">
		<strong>Кільце многочленів</strong>
	</div>
	<select @onchange="SelectedMethod">
		<option value="">--Оберіть метод--</option>
		<option value="11">11. Додавання, віднімання, множення двох многочленів.</option>
		<option value="12">12. Знаходження похідної многочлена.</option>
		<option value="13">13. Знаходження частки та остачі від ділення.</option>
		<option value="14">14. Знаходження кругового многочлена.</option>
	</select>
	@if (!string.IsNullOrWhiteSpace(selected))
	{
		<div class="input">
			<input type="text" name="input" id="input" @bind-value="@coefModule" placeholder="Enter coefficient module">
		</div>
	}


	@switch (selected)
	{
		case "11":
			<div>
				<div class="wrapper">
					<div class="input">
						<input type="text" name="input" id="input" @bind-value="@firstInputBox" placeholder="Enter first number">
						<input type="text" name="input" id="input" @bind-value="@secondInputBox" placeholder="Enter second number">
					</div>
				</div>
				<button class="custom-btn btn-15" @onclick="Add">Add</button>
				<button class="custom-btn btn-15" @onclick="Subtract">Subtract</button>
				<button class="custom-btn btn-15" @onclick="Multiply">Multiply</button>
				@if (!string.IsNullOrWhiteSpace(result))
				{
					<div class="wrapper">
						<div class="typing-demo">
							Result:
						</div>
						<div class="typing-demo">
							@result
						</div>
					</div>
				}
			</div>
			break;
		case "12":
			<div>
				<p>Someone didn't implemented it yet on api :)'</p>
				@*<input type="text" @bind-value="@firstInputBox" />
				<button @onclick="Derivative"> Derivative </button>
				<button @onclick="Evaluate"> Evaluate </button>
					<p>@result</p>*@
			</div>
			break;
		case "13":
			<div>
				<div class="wrapper">
					<div class="input">
						<input type="text" name="input" id="input" @bind-value="@firstInputBox" placeholder="Enter first number">
						<input type="text" name="input" id="input" @bind-value="@secondInputBox" placeholder="Enter second number">
					</div>
				</div>
				<button class="custom-btn btn-15" @onclick="Division">Division</button>
				<button class="custom-btn btn-15" @onclick="GCD">GCD</button>
				@if (!string.IsNullOrWhiteSpace(result))
				{
					<div class="wrapper">
						<div class="typing-demo">
							Result:
						</div>
						<div class="typing-demo">
							@result
						</div>
					</div>
				}
			</div>
			break;
		case "14":
			<div>
				<p>Someone didn't implemented it yet on api :)'</p>
				@*<input type="text" @bind-value="@firstInputBox" />
				<button @onclick="Calculate"> Calculate </button>
					<p>@result</p>*@
			</div>
			break;
		default:
			break;
	}
</div>




@code {
	public string selected { get; set; } = "";
	public string result { get; set; } = "";
	public string errStr { get; set; } = "";
	[Required] public static string coefModule { get; set; } = "";
	[Required] public string firstInputBox { get; set; } = "";
	[Required] public string secondInputBox { get; set; } = "";

	private void SelectedMethod(ChangeEventArgs e)
	{
		result = "";
		errStr = "";
		if (!string.IsNullOrWhiteSpace((string)e.Value))
		{
			selected = (string)e.Value;
		}
	}

	private unsafe void Add()
	{
		try
		{
			int size1 = 0, size2 = 0;
			byte[] str1 = Encoding.ASCII.GetBytes(firstInputBox);
			byte[] str2 = Encoding.ASCII.GetBytes(secondInputBox);
			byte[] modBytes = Encoding.ASCII.GetBytes(coefModule);
			byte[] errorStrBytes = Encoding.ASCII.GetBytes(errStr);

			fixed (byte* modPtr = modBytes)
			fixed (byte* errStrPtr = errorStrBytes)
			fixed (byte* str1Ptr = str1)
			fixed (byte* str2Ptr = str2)
			{
				var parsedPoly1 = PolyRingMethods.polyParse(ref size1, str1Ptr);
				var parsedPoly2 = PolyRingMethods.polyParse(ref size2, str2Ptr);

				int size = 0;

				byte* resultPtr = PolyRingMethods.polyAddition(ref size, size1, parsedPoly1, size2, parsedPoly2, modPtr, errStrPtr);


				byte[] resultBytes = new byte[size];
				Marshal.Copy((IntPtr)resultPtr, resultBytes, 0, size);
				result = Encoding.ASCII.GetString(resultBytes);
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	private unsafe void Subtract()
	{
		//try
		//{
		//	int size1, size2;
		//	var aBytes = PolyRingMethods.polyParse(firstInputBox, out size1);
		//	var bBytes = PolyRingMethods.polyParse(secondInputBox, out size2);
		//	byte[] modBytes = Encoding.ASCII.GetBytes(coefModule);
		//	byte[] errorStrBytes = Encoding.ASCII.GetBytes(errStr);

		//	int size = 0;

		//	fixed (byte* modPtr = modBytes)
		//	fixed (byte* errStrPtr = errorStrBytes)
		//	{
		//		byte** resultPtr = PolyRingMethods.polySubstruction(ref size, size1, aBytes, size2, bBytes, modPtr, errStrPtr);

		//		result = PolyRingMethods.polyParse(resultPtr);
		//	}
		//}
		//catch (Exception ex)
		//{
		//	Console.WriteLine(ex.Message);
		//}
	}

	private unsafe void Multiply()
	{
		//try
		//{
		//	int size1, size2;
		//	var aBytes = PolyRingMethods.polyParse(firstInputBox, out size1);
		//	Console.WriteLine(PolyRingMethods.polyParse(aBytes));
		//	var bBytes = PolyRingMethods.polyParse(secondInputBox, out size2);
		//	Console.WriteLine(PolyRingMethods.polyParse(bBytes));
		//	Console.WriteLine();

		//	byte[] modBytes = Encoding.ASCII.GetBytes(coefModule);
		//	byte[] errorStrBytes = Encoding.ASCII.GetBytes(errStr);

		//	int size = 0;

		//	fixed (byte* modPtr = modBytes)
		//	fixed (byte* errStrPtr = errorStrBytes)
		//	{
		//		byte** resultPtr = PolyRingMethods.polyMultiplication(ref size, size1, aBytes, size2, bBytes, modPtr, errStrPtr);

		//		result = PolyRingMethods.polyParse(resultPtr);
		//	}
		//}
		//catch (Exception ex)
		//{
		//	Console.WriteLine(ex.Message);
		//}
	}

	private void Division()
	{
		//PolyRingMethods.addition();
	}

	private void Rest()
	{
		//PolyRingMethods.addition();
	}

	private void GCD()
	{
		//PolyRingMethods.addition();
	}
}